#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Add-on: C-Gate Web Bridge
# Starts the C-Gate Web Bridge service
# ==============================================================================

bashio::log.info "Starting C-Gate Web Bridge..."

# Parse user configuration and create settings file
bashio::log.info "Parsing addon configuration..."

# Read addon options from /data/options.json
OPTIONS_FILE="/data/options.json"
if bashio::fs.file_exists "${OPTIONS_FILE}"; then
    bashio::log.debug "Found options file: ${OPTIONS_FILE}"
    
    # Extract configuration values
    CGATE_HOST=$(bashio::config 'cgate_host')
    CGATE_PORT=$(bashio::config 'cgate_port')
    CGATE_CONTROL_PORT=$(bashio::config 'cgate_control_port')
    CGATE_PROJECT=$(bashio::config 'cgate_project')
    
    MQTT_HOST=$(bashio::config 'mqtt_host')
    MQTT_PORT=$(bashio::config 'mqtt_port')
    MQTT_USERNAME=$(bashio::config 'mqtt_username')
    MQTT_PASSWORD=$(bashio::config 'mqtt_password')
    
    GETALL_NETWORKS=$(bashio::config 'getall_networks')
    GETALL_ON_START=$(bashio::config 'getall_on_start')
    GETALL_PERIOD=$(bashio::config 'getall_period')
    
    RETAIN_READS=$(bashio::config 'retain_reads')
    MESSAGE_INTERVAL=$(bashio::config 'message_interval')
    LOG_LEVEL=$(bashio::config 'log_level')
    
    HA_DISCOVERY_ENABLED=$(bashio::config 'ha_discovery_enabled')
    HA_DISCOVERY_PREFIX=$(bashio::config 'ha_discovery_prefix')
    HA_DISCOVERY_NETWORKS=$(bashio::config 'ha_discovery_networks')
    HA_DISCOVERY_COVER_APP_ID=$(bashio::config 'ha_discovery_cover_app_id')
    HA_DISCOVERY_SWITCH_APP_ID=$(bashio::config 'ha_discovery_switch_app_id')
    
    bashio::log.info "Loaded configuration - C-Gate: ${CGATE_HOST}:${CGATE_PORT}, MQTT: ${MQTT_HOST}:${MQTT_PORT}"
else
    bashio::log.error "Configuration file not found: ${OPTIONS_FILE}"
    exit 1
fi

# Create settings.js for the application
SETTINGS_FILE="/app/settings.js"
bashio::log.info "Creating settings file: ${SETTINGS_FILE}"

cat > "${SETTINGS_FILE}" << EOF
// Generated by Home Assistant addon
// DO NOT EDIT MANUALLY - This file is overwritten on startup

// C-Gate connection settings
exports.cbusip = '${CGATE_HOST}';
exports.cbusport = ${CGATE_PORT};
exports.cbuscontrolport = ${CGATE_CONTROL_PORT};
exports.cbusname = "${CGATE_PROJECT}";

// MQTT settings
exports.mqtt = '${MQTT_HOST}:${MQTT_PORT}';
EOF

# Add MQTT credentials if provided
if [[ -n "${MQTT_USERNAME}" ]]; then
    echo "exports.mqttusername = '${MQTT_USERNAME}';" >> "${SETTINGS_FILE}"
fi

if [[ -n "${MQTT_PASSWORD}" ]]; then
    echo "exports.mqttpassword = '${MQTT_PASSWORD}';" >> "${SETTINGS_FILE}"
fi

# Add getall settings if networks are configured
if [[ "${GETALL_NETWORKS}" != "[]" && "${GETALL_NETWORKS}" != "" ]]; then
    # Extract first network from array for getallnetapp format
    FIRST_NETWORK=$(echo "${GETALL_NETWORKS}" | jq -r '.[0]')
    echo "exports.getallnetapp = '${FIRST_NETWORK}/56';" >> "${SETTINGS_FILE}"
    
    if [[ "${GETALL_ON_START}" == "true" ]]; then
        echo "exports.getallonstart = true;" >> "${SETTINGS_FILE}"
    fi
    
    echo "exports.getallperiod = ${GETALL_PERIOD};" >> "${SETTINGS_FILE}"
fi

# Add other settings
if [[ "${RETAIN_READS}" == "true" ]]; then
    echo "exports.retainreads = true;" >> "${SETTINGS_FILE}"
fi

echo "exports.messageinterval = ${MESSAGE_INTERVAL};" >> "${SETTINGS_FILE}"

# Enable logging if debug level
if [[ "${LOG_LEVEL}" == "debug" ]]; then
    echo "exports.logging = true;" >> "${SETTINGS_FILE}"
else
    echo "exports.logging = false;" >> "${SETTINGS_FILE}"
fi

# Home Assistant Discovery settings
if [[ "${HA_DISCOVERY_ENABLED}" == "true" ]]; then
    echo "exports.ha_discovery_enabled = true;" >> "${SETTINGS_FILE}"
    echo "exports.ha_discovery_prefix = '${HA_DISCOVERY_PREFIX}';" >> "${SETTINGS_FILE}"
    
    if [[ "${HA_DISCOVERY_NETWORKS}" != "[]" && "${HA_DISCOVERY_NETWORKS}" != "" ]]; then
        # Convert JSON array to JavaScript array format
        NETWORKS_JS=$(echo "${HA_DISCOVERY_NETWORKS}" | jq -c '.')
        echo "exports.ha_discovery_networks = ${NETWORKS_JS};" >> "${SETTINGS_FILE}"
    fi
    
    if [[ "${HA_DISCOVERY_COVER_APP_ID}" != "null" && -n "${HA_DISCOVERY_COVER_APP_ID}" ]]; then
        echo "exports.ha_discovery_cover_app_id = '${HA_DISCOVERY_COVER_APP_ID}';" >> "${SETTINGS_FILE}"
    fi
    
    if [[ "${HA_DISCOVERY_SWITCH_APP_ID}" != "null" && -n "${HA_DISCOVERY_SWITCH_APP_ID}" ]]; then
        echo "exports.ha_discovery_switch_app_id = '${HA_DISCOVERY_SWITCH_APP_ID}';" >> "${SETTINGS_FILE}"
    fi
fi

bashio::log.debug "Generated settings file:"
cat "${SETTINGS_FILE}"

# Set up environment variables for the application
export NODE_ENV="production"
export LOG_LEVEL="${LOG_LEVEL}"

# Change to application directory
cd /app || exit 1

# Start the application
bashio::log.info "Starting C-Gate Web Bridge application..."
exec node index.js
